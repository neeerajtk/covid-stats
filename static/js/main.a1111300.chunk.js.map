{"version":3,"sources":["Components/Header.js","Components/State.js","Components/Country.js","Components/World.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","collapseOnSelectexpand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","to","State","props","state","stateData","axios","get","then","response","console","log","data","setState","keys","Object","this","Accordion","filter","item","map","key","districts","districtData","total_active","total_confirmed","total_deaths","total_recover","district_list","x","active","confirmed","deceased","recovered","ob","push","Card","as","Button","eventKey","Body","district_name","Component","Country","countryName","countryData","country_name","style","width","Title","cases","Text","todayCases","critical","todayRecovered","deaths","todayDeaths","React","World","handleSearch","event","forceUpdate","list","globalData","value","target","country","toString","toLowerCase","search","Table","striped","bordered","hover","type","name","onClick","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1111300.chunk.js","sourcesContent":["import React from 'react';\nimport {Navbar,Nav} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <div>\n            <Navbar collapseOnSelectexpand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"#home\" >COVID Stats</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                    <Link className=\"nav-link\" to='/country'>Local Stats </Link>\n                    <Link className=\"nav-link\" to='/world'> Global Stats</Link>\n                \n                    </Nav>\n                  \n                 </Navbar.Collapse>\n                </Navbar>\n        </div>\n    )\n}\nexport default Header;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Card, Accordion, Button, Table} from 'react-bootstrap';\n\nclass State extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            stateData : {}\n        }\n    }\n    componentDidMount(){\n        axios.get('https://api.covid19india.org/state_district_wise.json')\n        .then(response =>{\n            console.log(response.data);\n            this.setState({stateData: response.data})\n        })\n    }\n\n    render() {\n\n        let keys = Object.keys(this.state.stateData);\n        console.log(keys);\n        \n        return (\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                <Accordion>\n\n                    {\n                        keys.filter(item => item!='State Unassigned').map((item,key)=>{\n                            let districts = this.state.stateData[item].districtData;\n                            let district_keys = Object.keys(districts);\n\n                            let total_active = 0;\n                            let total_confirmed = 0;\n                            let total_deaths = 0;\n                            let total_recover = 0;\n\n\n                            let district_list = [];\n                            for(let x in districts){\n                                total_active += districts[x].active;\n                                total_confirmed += districts[x].confirmed;\n                                total_deaths += districts[x].deceased;\n                                total_recover += districts[x].recovered;\n                                let ob = districts[x];\n                                ob[\"district_name\"] = x;\n                                district_list.push(ob);\n                             }\n                             console.log(district_list);\n                             \n\n                            return(\n                                <Card>\n                                <Card.Header>\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey={key}>\n                                  <span className=\"btn-dark p-1 mr-2\">{item}</span>   - Total cases - {total_confirmed} Active - {total_active} Recovered - {total_recover} Death - {total_deaths}\n                                </Accordion.Toggle>\n                                </Card.Header>\n                                <Accordion.Collapse eventKey={key}>\n                                <Card.Body>\n                                    <table className=\"table table-striped table-bordered\">  \n                                        <thead>\n                                            <tr>\n                                                <td>District Name</td>\n                                                <td>Total Reported Cases</td>\n                                                <td>Total Active Cases</td>\n                                                <td>Total Recovered Cases</td>\n                                                <td>Total Deaths</td>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {\n                                                district_list.filter(item => item!='State Unassigned').map((item,key)=> {\n                                                    return(\n                                                        <tr key={key}>\n                                                            <td>{item.district_name}</td>\n                                                            <td>{item.confirmed}</td>\n                                                            <td>{item.active}</td>\n                                                            <td>{item.recovered}</td>\n                                                            <td>{item.deceased}</td>\n                                                        </tr>\n                                                    )\n                                                })\n                                            }\n                                        </tbody>\n                                    </table>\n                                </Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                            )\n                        }) \n                    }\n\n                    \n\n                </Accordion>\n                </div>\n                \n            </div>\n        )\n    }\n}\nexport default State;","import React from 'react';\n\nimport State from './State';\n\nimport {Card, Button} from 'react-bootstrap';\n\nimport axios from 'axios';\n\n\nclass Country extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            countryName:'',\n            countryData: {}\n        }\n    }\n\n    // componentWillMount(){\n    //     this.getGeoInfo();\n    // }\n\n     componentDidMount(){\n        axios.get('https://ipapi.co/json/').then((response) => {\n            let data =  response.data;\n            this.setState({\n                countryName: data.country_name,\n            },()=>{\n\n                axios.get(`https://corona.lmao.ninja/v2/countries/${this.state.countryName}`).then(response=>{\n                    this.setState({\n                        countryData: response.data,\n                        \n                    })\n                })\n                \n            });\n            console.log(this.state.countryName);\n            \n        })\n       \n    };\n\n    //  componentDidMount(){\n    //     //  this.getGeoInfo();\n    //     axios.get(`https://corona.lmao.ninja/v2/countries/${this.state.countryName}`).then(response=>{\n    //         this.setState({\n    //             countryData: response.data,\n                \n    //         })\n    //     })\n        \n    // }\n\n    \n\n   \n    render(){\n    return (\n        <div className=\"row\"> \n            <div className=\"col-md-12\">\n                <h3>Your Location : {this.state.countryName}</h3>\n            </div>\n            <div className=\"col-md-12\">\n                <div className=\"row\">\n                    <div className=\"col-md-3\">\n                    <Card className=\"badge badge-warning\" style={{ width: '18rem' }}>\n                        <Card.Body className=\"text-center\">\n                            <Card.Title>Total Reported Cases</Card.Title>\n                            <h3>{this.state.countryData.cases}</h3>\n                            <Card.Text>\n                                    [Today : {this.state.countryData.todayCases}]\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                    </div>\n                    <div className=\"col-md-3\">\n                    <Card className=\"badge badge-secondary\" style={{ width: '18rem' }}>\n                        <Card.Body className=\"text-center\">\n                            <Card.Title>Total Active Cases</Card.Title>\n                                <h3>{this.state.countryData.active}</h3>\n                            <Card.Text>\n                                    [Today : {this.state.countryData.critical}]\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                    </div>\n                    <div className=\"col-md-3\">\n                    <Card className=\"badge badge-success\" style={{ width: '18rem' }}>\n                        <Card.Body className=\"text-center\">\n                            <Card.Title>Total Recovered Cases</Card.Title>\n                                 <h3>{this.state.countryData.recovered}</h3>\n                            <Card.Text>\n                                   [Today : {this.state.countryData.todayRecovered} ]\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                    </div>\n                    <div className=\"col-md-3\">\n                    <Card className=\"badge badge-danger\" style={{ width: '18rem' }}>\n                        <Card.Body className=\"text-center\">\n                            <Card.Title>Total Deaths</Card.Title>\n                                 <h3>{this.state.countryData.deaths}</h3>\n                            <Card.Text>\n                                    [Today : {this.state.countryData.todayDeaths}]\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-12\">\n                <State/>\n            </div>\n        \n        </div>\n    )\n}\n}\n\nexport default Country;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Card, Accordion, Button,Table} from 'react-bootstrap';\n\n\n\nclass World extends Component {\n    constructor(props){\n        super(props);\n        this.state= {\n            globalData:[]        }\n\n    }\n\n    componentDidMount(){\n        axios.get(\"https://corona.lmao.ninja/v2/countries\")\n        .then(response => {\n            console.log(response);\n            this.setState({\n                globalData: response.data,\n            })\n            \n        })\n    }\n\n    handleSearch= (event)=> {\n        this.forceUpdate();\n        var list = this.state.globalData;\n        console.log('list os');\n        \n        console.log(list);\n        \n        let {value}= event.target;\n        list = list.filter(function(item){\n            return item.country.toString().toLowerCase().search(value.toLowerCase()) !==-1;\n        });\n\n        this.setState({\n            globalData: list\n        })\n\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                <Table striped bordered hover variant=\"dark\">\n                        <thead>\n                            <tr>\n                                <td>Search by Country :  <input type=\"text\" name=\"search\" onClick={this.handleSearch}/>\n                                {/* <p>{this.state.searchValue}</p> */}\n                                </td>\n                                {/* <td></td> */}\n                            </tr>\n                            <tr>\n                                <td><b>Country</b></td>\n                                <td><b>Total Cases</b></td>\n                                <td><b>Recovered</b></td>\n                                <td><b>Death</b></td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.globalData.map((item, key)=>{\n                                    return (\n                                        <tr key={key}>\n                                            <td>{item.country}</td>\n                                            <td>{item.cases}</td>\n                                            <td>{item.recovered}</td>\n                                            <td>{item.deaths}</td>\n                                        </tr>\n                                    )\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default World;","import React from 'react';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'; \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button} from 'react-bootstrap'\nimport './App.css';\nimport Header from './Components/Header';\nimport Country from './Components/Country';\nimport World from './Components/World';\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n    <BrowserRouter>\n      <Header/>\n      <Switch>\n        <Route exact path=\"/\"><World/></Route>\n        <Route path=\"/country\"><Country/></Route>\n        <Route path=\"/world\"><World/></Route>\n      </Switch>\n    </BrowserRouter>\n    </div>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}